npm i -g @nestjs/cli

nvm install 18.5.0

nvm use 18.5.0 

‚ùØ node --version
v18.5.0

nest new 

-> "nest_rest_api"

-> "yarn"

cd nest_rest_api

yarn start | yarn start:dev


** Generate Controller **

nest generate controller

OR

n g controller

^ app.module.ts automatically updates by importing the newly created controller

** Use the dry-run flag to simulate the output of created CLI objects **

‚ùØ n g controller module/abc --dry-run
CREATE src/module/abc/abc.controller.spec.ts (471 bytes)
CREATE src/module/abc/abc.controller.ts (95 bytes)
UPDATE src/app.module.ts (410 bytes)
Dry run enabled. No files written to disk.


** Generate Service **

n g service

^ app.module.ts automatically updates by importing the newly created service


** Generate Module **

n g module

^ app.module.ts automatically updates by importing the newly created module



/**
 * Generate a DTO class with the Nest CLI 
 * --no-spec (no test file needed for DTO's)
 */
n g class coffees/dto/create-coffee.dto --no-spec

n g class coffees/dto/update-coffee.dto --no-spec



The ValidationPipe provides a convenient way of enforcing validation rules for all incoming client payloads. You can specify these rules by using simple annotations in your DTO!

// Apply the ValidationPipe globally in our main.ts file
app.useGlobalPipes(new ValidationPipe());


// Install needed dependencies
yarn add class-validator class-transformer 


// Implement validation rules in our CreateCoffeeDto
import { IsString } from 'class-validator';


// Install @nestjs/mapped-types 
yarn add @nestjs/mapped-types


// Configure validation
main.ts



** PostgresSQL Config **

nest_rest_api/docker-compose.yml

# Start containers in detached / background mode

docker-compose up -d

# Stop containers

docker-compose down


** Install neccessary TypeORM dependencies **

yarn add @nestjs/typeorm typeorm pg


** Create a Relation between 2 Entities **

n g class coffees/entities/flavour.entity --no-spec


** Adding Pagination **

nest g class common/dto/pagination-query.dto --no-spec


** Use Transactions **

nest g class events/entities/event.entity --no-spec


** Setting up Migrations **

typeorm-cli.config.ts

** Creating a TypeOrm Migration **

npx typeorm migration:create src/migrations/CoffeeRefactor

^ CoffeeRefactor being the NAME we are giving "this" migration

^ src/migrations/1657823495013-CoffeeRefactor.ts



/* RUNNING MIGRATIONS */

/**
 * üí° Remember üí°
 * You must BUILD your Nest project (so that everything is output to the `/dist/` folder,
 * before a Migration can run, it needs compilated files.
 */
 
// Compile project first 
yarn build

// Run migration(s) 
npx typeorm migration:run -d dist/typeorm-cli.config

// REVERT migration(s)
npx typeorm migration:revert -d dist/typeorm-cli.config

// Let TypeOrm generate migrations (for you)
npx typeorm migration:generate src/migrations/CoffeeSchemaUpdate -d dist/typeorm-cli.config




npx typeorm migration:create src/migrations/CoffeeSchemaUpdate